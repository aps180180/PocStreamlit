import fdb
from typing import Optional, List, Tuple

# Configuração de conexão direta
DB_CONFIG = {
    'host': 'localhost',
    'database': 'c:/teste/dados.fdb',
    'user': 'SYSDBA',
    'password': 'masterkey',
    'charset': 'UTF8',
    'port': 3050
}

def get_connection():
    """Retorna uma conexão ativa com o banco Firebird"""
    return fdb.connect(**DB_CONFIG)

def criar_tabelas():
    """Cria as tabelas se não existirem"""
    con = get_connection()
    cur = con.cursor()
    
    # Criar tabela clientes
    try:
        cur.execute('''
            CREATE TABLE clientes (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR(100) NOT NULL,
                email VARCHAR(100) NOT NULL
            )
        ''')
        con.commit()
        print("Tabela clientes criada")
    except Exception as e:
        print(f"Tabela clientes já existe: {e}")
        con.rollback()
    
    # Criar tabela produtos
    try:
        cur.execute('''
            CREATE TABLE produtos (
                id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                nome VARCHAR(100) NOT NULL,
                preco DECIMAL(10,2) NOT NULL
            )
        ''')
        con.commit()
        print("Tabela produtos criada")
    except Exception as e:
        print(f"Tabela produtos já existe: {e}")
        con.rollback()
    
    cur.close()
    con.close()

# ===== FUNÇÕES CRUD PARA CLIENTE =====

def contar_clientes(busca: str = "", tipo_busca: str = "nome") -> int:
    """Conta total de clientes considerando filtros"""
    con = get_connection()
    cur = con.cursor()
    try:
        if busca.strip():
            if tipo_busca == "codigo":
                cur.execute("SELECT COUNT(*) FROM clientes WHERE id = ?", (int(busca),))
            else:  # nome
                cur.execute("SELECT COUNT(*) FROM clientes WHERE UPPER(nome) LIKE UPPER(?)", (f"%{busca}%",))
        else:
            cur.execute("SELECT COUNT(*) FROM clientes")
        total = cur.fetchone()[0]
    finally:
        cur.close()
        con.close()
    return total

def listar_clientes(busca: str = "", tipo_busca: str = "nome", limite: int = 10, offset: int = 0) -> List[Tuple]:
    """Lista clientes com paginação e filtro por código ou nome"""
    con = get_connection()
    cur = con.cursor()
    try:
        if busca.strip():
            if tipo_busca == "codigo":
                try:
                    codigo = int(busca)
                    cur.execute(
                        "SELECT FIRST ? SKIP ? id, nome, email FROM clientes WHERE id = ? ORDER BY id",
                        (limite, offset, codigo)
                    )
                except ValueError:
                    return []  # Busca por código inválida
            else:  # nome
                cur.execute(
                    "SELECT FIRST ? SKIP ? id, nome, email FROM clientes WHERE UPPER(nome) LIKE UPPER(?) ORDER BY id",
                    (limite, offset, f"%{busca}%")
                )
        else:
            cur.execute("SELECT FIRST ? SKIP ? id, nome, email FROM clientes ORDER BY id", (limite, offset))
        rows = cur.fetchall()
    finally:
        cur.close()
        con.close()
    return rows

def inserir_cliente(nome: str, email: str):
    """Insere um novo cliente"""
    con = get_connection()
    cur = con.cursor()
    try:
        cur.execute("INSERT INTO clientes (nome, email) VALUES (?, ?)", (nome, email))
        con.commit()
    finally:
        cur.close()
        con.close()

def atualizar_cliente(id: int, nome: str, email: str):
    """Atualiza dados de um cliente"""
    con = get_connection()
    cur = con.cursor()
    try:
        cur.execute("UPDATE clientes SET nome = ?, email = ? WHERE id = ?", (nome, email, id))
        con.commit()
    finally:
        cur.close()
        con.close()

def excluir_cliente(id: int):
    """Exclui um cliente"""
    con = get_connection()
    cur = con.cursor()
    try:
        cur.execute("DELETE FROM clientes WHERE id = ?", (id,))
        con.commit()
    finally:
        cur.close()
        con.close()

def obter_cliente(id: int) -> Optional[Tuple]:
    """Retorna um cliente específico por ID"""
    con = get_connection()
    cur = con.cursor()
    try:
        cur.execute("SELECT id, nome, email FROM clientes WHERE id = ?", (id,))
        row = cur.fetchone()
    finally:
        cur.close()
        con.close()
    return row

# ===== FUNÇÕES CRUD PARA PRODUTO =====

def contar_produtos(busca: str = "", tipo_busca: str = "nome") -> int:
    """Conta total de produtos considerando filtros"""
    con = get_connection()
    cur = con.cursor()
    try:
        if busca.strip():
            if tipo_busca == "codigo":
                cur.execute("SELECT COUNT(*) FROM produtos WHERE id = ?", (int(busca),))
            else:  # nome
                cur.execute("SELECT COUNT(*) FROM produtos WHERE UPPER(nome) LIKE UPPER(?)", (f"%{busca}%",))
        else:
            cur.execute("SELECT COUNT(*) FROM produtos")
        total = cur.fetchone()[0]
    finally:
        cur.close()
        con.close()
    return total

def listar_produtos(busca: str = "", tipo_busca: str = "nome", limite: int = 10, offset: int = 0) -> List[Tuple]:
    """Lista produtos com paginação e filtro por código ou nome"""
    con = get_connection()
    cur = con.cursor()
    try:
        if busca.strip():
            if tipo_busca == "codigo":
                try:
                    codigo = int(busca)
                    cur.execute(
                        "SELECT FIRST ? SKIP ? id, nome, preco FROM produtos WHERE id = ? ORDER BY id",
                        (limite, offset, codigo)
                    )
                except ValueError:
                    return []
            else:  # nome
                cur.execute(
                    "SELECT FIRST ? SKIP ? id, nome, preco FROM produtos WHERE UPPER(nome) LIKE UPPER(?) ORDER BY id",
                    (limite, offset, f"%{busca}%")
                )
        else:
            cur.execute("SELECT FIRST ? SKIP ? id, nome, preco FROM produtos ORDER BY id", (limite, offset))
        rows = cur.fetchall()
    finally:
        cur.close()
        con.close()
    return rows

def inserir_produto(nome: str, preco: float):
    """Insere um novo produto"""
    con = get_connection()
    cur = con.cursor()
    try:
        cur.execute("INSERT INTO produtos (nome, preco) VALUES (?, ?)", (nome, preco))
        con.commit()
    finally:
        cur.close()
        con.close()

def atualizar_produto(id: int, nome: str, preco: float):
    """Atualiza dados de um produto"""
    con = get_connection()
    cur = con.cursor()
    try:
        cur.execute("UPDATE produtos SET nome = ?, preco = ? WHERE id = ?", (nome, preco, id))
        con.commit()
    finally:
        cur.close()
        con.close()

def excluir_produto(id: int):
    """Exclui um produto"""
    con = get_connection()
    cur = con.cursor()
    try:
        cur.execute("DELETE FROM produtos WHERE id = ?", (id,))
        con.commit()
    finally:
        cur.close()
        con.close()

def obter_produto(id: int) -> Optional[Tuple]:
    """Retorna um produto específico por ID"""
    con = get_connection()
    cur = con.cursor()
    try:
        cur.execute("SELECT id, nome, preco FROM produtos WHERE id = ?", (id,))
        row = cur.fetchone()
    finally:
        cur.close()
        con.close()
    return row
